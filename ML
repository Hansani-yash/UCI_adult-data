{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e23d3ab8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>workclass</th>\n",
       "      <th>fnlwgt</th>\n",
       "      <th>education</th>\n",
       "      <th>education-num</th>\n",
       "      <th>marital-status</th>\n",
       "      <th>occupation</th>\n",
       "      <th>relationship</th>\n",
       "      <th>race</th>\n",
       "      <th>sex</th>\n",
       "      <th>capital-gain</th>\n",
       "      <th>capital-loss</th>\n",
       "      <th>hours-per-week</th>\n",
       "      <th>native-country</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>77516</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>2174</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>Self-emp-not-inc</td>\n",
       "      <td>83311</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>Private</td>\n",
       "      <td>215646</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53</td>\n",
       "      <td>Private</td>\n",
       "      <td>234721</td>\n",
       "      <td>11th</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28</td>\n",
       "      <td>Private</td>\n",
       "      <td>338409</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Wife</td>\n",
       "      <td>Black</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32556</th>\n",
       "      <td>27</td>\n",
       "      <td>Private</td>\n",
       "      <td>257302</td>\n",
       "      <td>Assoc-acdm</td>\n",
       "      <td>12</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Tech-support</td>\n",
       "      <td>Wife</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32557</th>\n",
       "      <td>40</td>\n",
       "      <td>Private</td>\n",
       "      <td>154374</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Machine-op-inspct</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32558</th>\n",
       "      <td>58</td>\n",
       "      <td>Private</td>\n",
       "      <td>151910</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Widowed</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Unmarried</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32559</th>\n",
       "      <td>22</td>\n",
       "      <td>Private</td>\n",
       "      <td>201490</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Own-child</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32560</th>\n",
       "      <td>52</td>\n",
       "      <td>Self-emp-inc</td>\n",
       "      <td>287927</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Wife</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>15024</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32561 rows Ã— 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age         workclass  fnlwgt   education  education-num  \\\n",
       "0       39         State-gov   77516   Bachelors             13   \n",
       "1       50  Self-emp-not-inc   83311   Bachelors             13   \n",
       "2       38           Private  215646     HS-grad              9   \n",
       "3       53           Private  234721        11th              7   \n",
       "4       28           Private  338409   Bachelors             13   \n",
       "...    ...               ...     ...         ...            ...   \n",
       "32556   27           Private  257302  Assoc-acdm             12   \n",
       "32557   40           Private  154374     HS-grad              9   \n",
       "32558   58           Private  151910     HS-grad              9   \n",
       "32559   22           Private  201490     HS-grad              9   \n",
       "32560   52      Self-emp-inc  287927     HS-grad              9   \n",
       "\n",
       "           marital-status         occupation   relationship   race     sex  \\\n",
       "0           Never-married       Adm-clerical  Not-in-family  White    Male   \n",
       "1      Married-civ-spouse    Exec-managerial        Husband  White    Male   \n",
       "2                Divorced  Handlers-cleaners  Not-in-family  White    Male   \n",
       "3      Married-civ-spouse  Handlers-cleaners        Husband  Black    Male   \n",
       "4      Married-civ-spouse     Prof-specialty           Wife  Black  Female   \n",
       "...                   ...                ...            ...    ...     ...   \n",
       "32556  Married-civ-spouse       Tech-support           Wife  White  Female   \n",
       "32557  Married-civ-spouse  Machine-op-inspct        Husband  White    Male   \n",
       "32558             Widowed       Adm-clerical      Unmarried  White  Female   \n",
       "32559       Never-married       Adm-clerical      Own-child  White    Male   \n",
       "32560  Married-civ-spouse    Exec-managerial           Wife  White  Female   \n",
       "\n",
       "       capital-gain  capital-loss  hours-per-week native-country income  \n",
       "0              2174             0              40  United-States  <=50K  \n",
       "1                 0             0              13  United-States  <=50K  \n",
       "2                 0             0              40  United-States  <=50K  \n",
       "3                 0             0              40  United-States  <=50K  \n",
       "4                 0             0              40           Cuba  <=50K  \n",
       "...             ...           ...             ...            ...    ...  \n",
       "32556             0             0              38  United-States  <=50K  \n",
       "32557             0             0              40  United-States   >50K  \n",
       "32558             0             0              40  United-States  <=50K  \n",
       "32559             0             0              20  United-States  <=50K  \n",
       "32560         15024             0              40  United-States   >50K  \n",
       "\n",
       "[32561 rows x 15 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the dataset\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Replace 'your_url_here' with the actual URL to the dataset\n",
    "url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data'\n",
    "column_names = ['age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status', \n",
    "                'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss', \n",
    "                'hours-per-week', 'native-country', 'income']\n",
    "\n",
    "df = pd.read_csv(url, header=None, names=column_names, na_values=' ?', skipinitialspace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "raw",
   "id": "1ac0ee3b",
   "metadata": {},
   "source": [
    "Check the null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1da545f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age               0\n",
       "workclass         0\n",
       "fnlwgt            0\n",
       "education         0\n",
       "education-num     0\n",
       "marital-status    0\n",
       "occupation        0\n",
       "relationship      0\n",
       "race              0\n",
       "sex               0\n",
       "capital-gain      0\n",
       "capital-loss      0\n",
       "hours-per-week    0\n",
       "native-country    0\n",
       "income            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum(axis =0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8322ddc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>fnlwgt</th>\n",
       "      <th>education-num</th>\n",
       "      <th>capital-gain</th>\n",
       "      <th>capital-loss</th>\n",
       "      <th>hours-per-week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>32561.000000</td>\n",
       "      <td>3.256100e+04</td>\n",
       "      <td>32561.000000</td>\n",
       "      <td>32561.000000</td>\n",
       "      <td>32561.000000</td>\n",
       "      <td>32561.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>38.581647</td>\n",
       "      <td>1.897784e+05</td>\n",
       "      <td>10.080679</td>\n",
       "      <td>1077.648844</td>\n",
       "      <td>87.303830</td>\n",
       "      <td>40.437456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>13.640433</td>\n",
       "      <td>1.055500e+05</td>\n",
       "      <td>2.572720</td>\n",
       "      <td>7385.292085</td>\n",
       "      <td>402.960219</td>\n",
       "      <td>12.347429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>1.228500e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>28.000000</td>\n",
       "      <td>1.178270e+05</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>40.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>1.783560e+05</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>40.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>48.000000</td>\n",
       "      <td>2.370510e+05</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.484705e+06</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>99999.000000</td>\n",
       "      <td>4356.000000</td>\n",
       "      <td>99.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age        fnlwgt  education-num  capital-gain  capital-loss  \\\n",
       "count  32561.000000  3.256100e+04   32561.000000  32561.000000  32561.000000   \n",
       "mean      38.581647  1.897784e+05      10.080679   1077.648844     87.303830   \n",
       "std       13.640433  1.055500e+05       2.572720   7385.292085    402.960219   \n",
       "min       17.000000  1.228500e+04       1.000000      0.000000      0.000000   \n",
       "25%       28.000000  1.178270e+05       9.000000      0.000000      0.000000   \n",
       "50%       37.000000  1.783560e+05      10.000000      0.000000      0.000000   \n",
       "75%       48.000000  2.370510e+05      12.000000      0.000000      0.000000   \n",
       "max       90.000000  1.484705e+06      16.000000  99999.000000   4356.000000   \n",
       "\n",
       "       hours-per-week  \n",
       "count    32561.000000  \n",
       "mean        40.437456  \n",
       "std         12.347429  \n",
       "min          1.000000  \n",
       "25%         40.000000  \n",
       "50%         40.000000  \n",
       "75%         45.000000  \n",
       "max         99.000000  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check statistical values\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "41e72360",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 32561 entries, 0 to 32560\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   age             32561 non-null  int64 \n",
      " 1   workclass       32561 non-null  object\n",
      " 2   fnlwgt          32561 non-null  int64 \n",
      " 3   education       32561 non-null  object\n",
      " 4   education-num   32561 non-null  int64 \n",
      " 5   marital-status  32561 non-null  object\n",
      " 6   occupation      32561 non-null  object\n",
      " 7   relationship    32561 non-null  object\n",
      " 8   race            32561 non-null  object\n",
      " 9   sex             32561 non-null  object\n",
      " 10  capital-gain    32561 non-null  int64 \n",
      " 11  capital-loss    32561 non-null  int64 \n",
      " 12  hours-per-week  32561 non-null  int64 \n",
      " 13  native-country  32561 non-null  object\n",
      " 14  income          32561 non-null  object\n",
      "dtypes: int64(6), object(9)\n",
      "memory usage: 3.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# Check the data types and attributes\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ab76e345",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<=50K    24720\n",
       ">50K      7841\n",
       "Name: income, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['income'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "247195eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "United-States                 29170\n",
       "Mexico                          643\n",
       "?                               583\n",
       "Philippines                     198\n",
       "Germany                         137\n",
       "Canada                          121\n",
       "Puerto-Rico                     114\n",
       "El-Salvador                     106\n",
       "India                           100\n",
       "Cuba                             95\n",
       "England                          90\n",
       "Jamaica                          81\n",
       "South                            80\n",
       "China                            75\n",
       "Italy                            73\n",
       "Dominican-Republic               70\n",
       "Vietnam                          67\n",
       "Guatemala                        64\n",
       "Japan                            62\n",
       "Poland                           60\n",
       "Columbia                         59\n",
       "Taiwan                           51\n",
       "Haiti                            44\n",
       "Iran                             43\n",
       "Portugal                         37\n",
       "Nicaragua                        34\n",
       "Peru                             31\n",
       "France                           29\n",
       "Greece                           29\n",
       "Ecuador                          28\n",
       "Ireland                          24\n",
       "Hong                             20\n",
       "Cambodia                         19\n",
       "Trinadad&Tobago                  19\n",
       "Laos                             18\n",
       "Thailand                         18\n",
       "Yugoslavia                       16\n",
       "Outlying-US(Guam-USVI-etc)       14\n",
       "Honduras                         13\n",
       "Hungary                          13\n",
       "Scotland                         12\n",
       "Holand-Netherlands                1\n",
       "Name: native-country, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['native-country'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ee9b2b3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>workclass</th>\n",
       "      <th>education-num</th>\n",
       "      <th>marital-status</th>\n",
       "      <th>occupation</th>\n",
       "      <th>relationship</th>\n",
       "      <th>race</th>\n",
       "      <th>sex</th>\n",
       "      <th>capital-gain</th>\n",
       "      <th>capital-loss</th>\n",
       "      <th>hours-per-week</th>\n",
       "      <th>native-country</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>2174</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>Self-emp-not-inc</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>Private</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53</td>\n",
       "      <td>Private</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28</td>\n",
       "      <td>Private</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Wife</td>\n",
       "      <td>Black</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32556</th>\n",
       "      <td>27</td>\n",
       "      <td>Private</td>\n",
       "      <td>12</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Tech-support</td>\n",
       "      <td>Wife</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32557</th>\n",
       "      <td>40</td>\n",
       "      <td>Private</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Machine-op-inspct</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32558</th>\n",
       "      <td>58</td>\n",
       "      <td>Private</td>\n",
       "      <td>9</td>\n",
       "      <td>Widowed</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Unmarried</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32559</th>\n",
       "      <td>22</td>\n",
       "      <td>Private</td>\n",
       "      <td>9</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Own-child</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32560</th>\n",
       "      <td>52</td>\n",
       "      <td>Self-emp-inc</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Wife</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>15024</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32561 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age         workclass  education-num      marital-status  \\\n",
       "0       39         State-gov             13       Never-married   \n",
       "1       50  Self-emp-not-inc             13  Married-civ-spouse   \n",
       "2       38           Private              9            Divorced   \n",
       "3       53           Private              7  Married-civ-spouse   \n",
       "4       28           Private             13  Married-civ-spouse   \n",
       "...    ...               ...            ...                 ...   \n",
       "32556   27           Private             12  Married-civ-spouse   \n",
       "32557   40           Private              9  Married-civ-spouse   \n",
       "32558   58           Private              9             Widowed   \n",
       "32559   22           Private              9       Never-married   \n",
       "32560   52      Self-emp-inc              9  Married-civ-spouse   \n",
       "\n",
       "              occupation   relationship   race     sex  capital-gain  \\\n",
       "0           Adm-clerical  Not-in-family  White    Male          2174   \n",
       "1        Exec-managerial        Husband  White    Male             0   \n",
       "2      Handlers-cleaners  Not-in-family  White    Male             0   \n",
       "3      Handlers-cleaners        Husband  Black    Male             0   \n",
       "4         Prof-specialty           Wife  Black  Female             0   \n",
       "...                  ...            ...    ...     ...           ...   \n",
       "32556       Tech-support           Wife  White  Female             0   \n",
       "32557  Machine-op-inspct        Husband  White    Male             0   \n",
       "32558       Adm-clerical      Unmarried  White  Female             0   \n",
       "32559       Adm-clerical      Own-child  White    Male             0   \n",
       "32560    Exec-managerial           Wife  White  Female         15024   \n",
       "\n",
       "       capital-loss  hours-per-week native-country income  \n",
       "0                 0              40  United-States  <=50K  \n",
       "1                 0              13  United-States  <=50K  \n",
       "2                 0              40  United-States  <=50K  \n",
       "3                 0              40  United-States  <=50K  \n",
       "4                 0              40           Cuba  <=50K  \n",
       "...             ...             ...            ...    ...  \n",
       "32556             0              38  United-States  <=50K  \n",
       "32557             0              40  United-States   >50K  \n",
       "32558             0              40  United-States  <=50K  \n",
       "32559             0              20  United-States  <=50K  \n",
       "32560             0              40  United-States   >50K  \n",
       "\n",
       "[32561 rows x 13 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.drop(['education','fnlwgt'],axis = 1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e6ccabb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>workclass</th>\n",
       "      <th>education-num</th>\n",
       "      <th>marital-status</th>\n",
       "      <th>occupation</th>\n",
       "      <th>relationship</th>\n",
       "      <th>race</th>\n",
       "      <th>sex</th>\n",
       "      <th>capital-gain</th>\n",
       "      <th>capital-loss</th>\n",
       "      <th>hours-per-week</th>\n",
       "      <th>native-country</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>2174</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>Self-emp-not-inc</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>Private</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53</td>\n",
       "      <td>Private</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28</td>\n",
       "      <td>Private</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Wife</td>\n",
       "      <td>Black</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age         workclass  education-num      marital-status  \\\n",
       "0   39         State-gov             13       Never-married   \n",
       "1   50  Self-emp-not-inc             13  Married-civ-spouse   \n",
       "2   38           Private              9            Divorced   \n",
       "3   53           Private              7  Married-civ-spouse   \n",
       "4   28           Private             13  Married-civ-spouse   \n",
       "\n",
       "          occupation   relationship   race     sex  capital-gain  \\\n",
       "0       Adm-clerical  Not-in-family  White    Male          2174   \n",
       "1    Exec-managerial        Husband  White    Male             0   \n",
       "2  Handlers-cleaners  Not-in-family  White    Male             0   \n",
       "3  Handlers-cleaners        Husband  Black    Male             0   \n",
       "4     Prof-specialty           Wife  Black  Female             0   \n",
       "\n",
       "   capital-loss  hours-per-week native-country income  \n",
       "0             0              40  United-States  <=50K  \n",
       "1             0              13  United-States  <=50K  \n",
       "2             0              40  United-States  <=50K  \n",
       "3             0              40  United-States  <=50K  \n",
       "4             0              40           Cuba  <=50K  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.replace('?', np.NaN, inplace = True)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e43e141e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age                  0\n",
      "workclass         1836\n",
      "education-num        0\n",
      "marital-status       0\n",
      "occupation        1843\n",
      "relationship         0\n",
      "race                 0\n",
      "sex                  0\n",
      "capital-gain         0\n",
      "capital-loss         0\n",
      "hours-per-week       0\n",
      "native-country     583\n",
      "income               0\n",
      "dtype: int64\n",
      "4262\n"
     ]
    }
   ],
   "source": [
    "# Check the missing values in each column\n",
    "null_value = print(df.isnull().sum())\n",
    "# Check the total amount of missing values\n",
    "null_value = print(df.isnull().sum().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "78c23984",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age               0\n",
      "workclass         0\n",
      "education-num     0\n",
      "marital-status    0\n",
      "occupation        0\n",
      "relationship      0\n",
      "race              0\n",
      "sex               0\n",
      "capital-gain      0\n",
      "capital-loss      0\n",
      "hours-per-week    0\n",
      "native-country    0\n",
      "income            0\n",
      "dtype: int64\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "df.fillna(method='ffill',inplace = True)\n",
    "null_value = print(df.isnull().sum())\n",
    "# Check the total amount of missing values\n",
    "null_value = print(df.isnull().sum().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5890ebd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>workclass</th>\n",
       "      <th>education-num</th>\n",
       "      <th>marital-status</th>\n",
       "      <th>occupation</th>\n",
       "      <th>relationship</th>\n",
       "      <th>race</th>\n",
       "      <th>sex</th>\n",
       "      <th>capital-gain</th>\n",
       "      <th>capital-loss</th>\n",
       "      <th>hours-per-week</th>\n",
       "      <th>native-country</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2174</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32556</th>\n",
       "      <td>27</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32557</th>\n",
       "      <td>40</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32558</th>\n",
       "      <td>58</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32559</th>\n",
       "      <td>22</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32560</th>\n",
       "      <td>52</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>15024</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32561 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age  workclass  education-num  marital-status  occupation  \\\n",
       "0       39          6             13               4           0   \n",
       "1       50          5             13               2           3   \n",
       "2       38          3              9               0           5   \n",
       "3       53          3              7               2           5   \n",
       "4       28          3             13               2           9   \n",
       "...    ...        ...            ...             ...         ...   \n",
       "32556   27          3             12               2          12   \n",
       "32557   40          3              9               2           6   \n",
       "32558   58          3              9               6           0   \n",
       "32559   22          3              9               4           0   \n",
       "32560   52          4              9               2           3   \n",
       "\n",
       "       relationship  race  sex  capital-gain  capital-loss  hours-per-week  \\\n",
       "0                 1     4    1          2174             0              40   \n",
       "1                 0     4    1             0             0              13   \n",
       "2                 1     4    1             0             0              40   \n",
       "3                 0     2    1             0             0              40   \n",
       "4                 5     2    0             0             0              40   \n",
       "...             ...   ...  ...           ...           ...             ...   \n",
       "32556             5     4    0             0             0              38   \n",
       "32557             0     4    1             0             0              40   \n",
       "32558             4     4    0             0             0              40   \n",
       "32559             3     4    1             0             0              20   \n",
       "32560             5     4    0         15024             0              40   \n",
       "\n",
       "       native-country  income  \n",
       "0                  38       0  \n",
       "1                  38       0  \n",
       "2                  38       0  \n",
       "3                  38       0  \n",
       "4                   4       0  \n",
       "...               ...     ...  \n",
       "32556              38       0  \n",
       "32557              38       1  \n",
       "32558              38       0  \n",
       "32559              38       0  \n",
       "32560              38       1  \n",
       "\n",
       "[32561 rows x 13 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Categorical data convert into numerical \n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "le = LabelEncoder()\n",
    "df['workclass']= le.fit_transform(df['workclass'])\n",
    "df['marital-status']= le.fit_transform(df['marital-status'])\n",
    "df['occupation']= le.fit_transform(df['occupation'])\n",
    "df['relationship']= le.fit_transform(df['relationship'])\n",
    "df['race']= le.fit_transform(df['race'])\n",
    "df['sex']= le.fit_transform(df['sex'])\n",
    "df['native-country']= le.fit_transform(df['native-country'])\n",
    "df['income']= le.fit_transform(df['income'])\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bf0aadd1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['income'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "edd977cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>workclass</th>\n",
       "      <th>education-num</th>\n",
       "      <th>marital-status</th>\n",
       "      <th>occupation</th>\n",
       "      <th>relationship</th>\n",
       "      <th>race</th>\n",
       "      <th>sex</th>\n",
       "      <th>capital-gain</th>\n",
       "      <th>capital-loss</th>\n",
       "      <th>hours-per-week</th>\n",
       "      <th>native-country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2174</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  workclass  education-num  marital-status  occupation  relationship  \\\n",
       "0   39          6             13               4           0             1   \n",
       "1   50          5             13               2           3             0   \n",
       "2   38          3              9               0           5             1   \n",
       "3   53          3              7               2           5             0   \n",
       "4   28          3             13               2           9             5   \n",
       "\n",
       "   race  sex  capital-gain  capital-loss  hours-per-week  native-country  \n",
       "0     4    1          2174             0              40              38  \n",
       "1     4    1             0             0              13              38  \n",
       "2     4    1             0             0              40              38  \n",
       "3     2    1             0             0              40              38  \n",
       "4     2    0             0             0              40               4  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop the income column from dataset and \n",
    "# assign as new data column\n",
    "x = df.drop(['income'], axis = 1)\n",
    "y = df['income']\n",
    "x.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fbcc0817",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize the data\n",
    "from sklearn.preprocessing import StandardScaler, Normalizer\n",
    "scaler = StandardScaler()\n",
    "x = scaler.fit_transform(x)\n",
    "x = Normalizer().fit_transform(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b8e27a1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    24720\n",
       "1    24720\n",
       "Name: income, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Balance the dataset\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "smote = SMOTE(sampling_strategy='minority')\n",
    "\n",
    "x_smote, y_smote = smote.fit_resample(x, y)\n",
    "y_smote.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9c6465ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the dataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(x_smote,y_smote, test_size = 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2af62efc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.34734138, -0.02413778, -0.00845074, ..., -0.05838432,\n",
       "        -0.44604166,  0.0711999 ],\n",
       "       [ 0.19130677, -0.85357839, -0.00980584, ..., -0.06774641,\n",
       "        -0.01107829,  0.082617  ],\n",
       "       [-0.20567017, -0.02628984, -0.12328775, ..., -0.0635897 ,\n",
       "        -0.0101219 , -0.55169591],\n",
       "       ...,\n",
       "       [-0.0485937 , -0.01657668, -0.29353863, ..., -0.04009558,\n",
       "         0.87774585,  0.04889671],\n",
       "       [ 0.04860325, -0.01737196,  0.2954573 , ...,  0.8734102 ,\n",
       "        -0.00687123,  0.05124255],\n",
       "       [ 0.18593884, -0.0342097 ,  0.78799379, ..., -0.08274622,\n",
       "        -0.01353115,  0.10090932]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7093aa10",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scaled the x_train and x_test\n",
    "x_train_scaled = scaler.fit_transform(x_train)\n",
    "x_test_scaled = scaler.transform(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f10f6a96",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.22391031, -0.06469903, -0.21992054, ..., -0.16851647,\n",
       "        -1.77309452,  0.14922231],\n",
       "       [ 0.5200872 , -2.89974901, -0.22419991, ..., -0.20991807,\n",
       "        -0.20892666,  0.2058105 ],\n",
       "       [-0.76521714, -0.07205482, -0.58257303, ..., -0.19153602,\n",
       "        -0.20548739, -2.93812495],\n",
       "       ...,\n",
       "       [-0.25664587, -0.03885499, -1.12022118, ..., -0.08763885,\n",
       "         2.98736589,  0.03867784],\n",
       "       [ 0.05805166, -0.04157326,  0.73981369, ...,  3.95212334,\n",
       "        -0.19379766,  0.05030488],\n",
       "       [ 0.50270727, -0.09912512,  2.29523195, ..., -0.27625115,\n",
       "        -0.21774736,  0.29647534]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c3e55c6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.61529702, -1.64918413,  1.0752356 , ..., -0.16294609,\n",
       "        -0.20268052,  0.14160866],\n",
       "       [-1.19913175, -0.07323772, -0.22268253, ..., -0.19523786,\n",
       "        -0.20697455,  0.18574542],\n",
       "       [-0.95188326, -0.14927796, -0.24727909, ..., -0.43320192,\n",
       "        -0.23861802,  0.5109975 ],\n",
       "       ...,\n",
       "       [ 0.30239687, -0.13377138, -0.24226321, ..., -0.38467487,\n",
       "         0.48878749,  0.44467016],\n",
       "       [ 0.14879205, -0.20781961, -0.26621541, ..., -0.61640503,\n",
       "        -0.26297961,  0.76140166],\n",
       "       [-0.06635571, -0.04472719,  0.15686348, ..., -0.1060156 ,\n",
       "        -0.35063082, -4.59670024]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8c674003",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix,roc_curve, auc\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16c0d331",
   "metadata": {},
   "source": [
    "# Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f31608e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score 0.7577872168284789\n",
      "\n",
      "Classification Report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.72      0.84      0.78      4905\n",
      "           1       0.81      0.67      0.74      4983\n",
      "\n",
      "    accuracy                           0.76      9888\n",
      "   macro avg       0.77      0.76      0.76      9888\n",
      "weighted avg       0.77      0.76      0.76      9888\n",
      "\n",
      "\n",
      "Confusion Metrics:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fit the model for split dataset\n",
    "gb = GaussianNB()\n",
    "gb.fit(x_train_scaled,y_train)\n",
    "\n",
    "y_pred = gb.predict (x_test_scaled)\n",
    "print('Accuracy Score', accuracy_score(y_test, y_pred))\n",
    "print('\\nClassification Report') \n",
    "print(classification_report(y_test,y_pred))\n",
    "\n",
    "print('\\nConfusion Metrics:')\n",
    "confusion_matrix = metrics.confusion_matrix(y_test, y_pred)\n",
    "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, \n",
    "                                            display_labels = [False,True])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# Predict the probabilities of the positive class\n",
    "y_pred = gb.predict_proba(x_test_scaled)[:,1]\n",
    "y_pred.shape\n",
    "\n",
    "# Calculate the ROC curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n",
    "\n",
    "# Calculate the AUC score\n",
    "auc_score = auc(fpr, tpr)\n",
    "x1=np.linspace(0,1,100)\n",
    "# Plot the ROC curve\n",
    "plt.plot(fpr, tpr, label=\"ROC curve (AUC = %0.2f)\" % auc_score)\n",
    "plt.plot(x1,x1,label='baseline')\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC curve for binary classification\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "b0dd2080",
   "metadata": {},
   "source": [
    "Make prediction from joblib for Naive bayes model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b8c07e9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model accuracy: 0.7577872168284789\n",
      "A person's income below $50K, Single prediction = [0]\n"
     ]
    }
   ],
   "source": [
    "from joblib import dump, load\n",
    "\n",
    "dump(gb, 'adgb.joblib')\n",
    "# Load the model using joblib\n",
    "loaded_model = load('adgb.joblib')\n",
    "\n",
    "# Make predictions using the loaded model\n",
    "def predict(input_data):\n",
    "    # Ensure input_data is a NumPy array\n",
    "    input_data_np = np.array(input_data)\n",
    "\n",
    "    # Use the loaded model for predictions\n",
    "    predictions = loaded_model.predict(input_data_np)\n",
    "\n",
    "    return predictions\n",
    "\n",
    "accuracy = loaded_model.score(x_test_scaled, y_test)\n",
    "print(f\"Loaded model accuracy: {accuracy}\")\n",
    "\n",
    "sample = x_test_scaled[0:1]  \n",
    "\n",
    "# Prediction of the model\n",
    "ld_pred = predict(sample)\n",
    "\n",
    "if ld_pred == 1:\n",
    "    print(\"A person's income above $50K, Single prediction =\", ld_pred)\n",
    "else:\n",
    "    print(\"A person's income below $50K, Single prediction =\", ld_pred)\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "ba832367",
   "metadata": {},
   "source": [
    "Make prediction from pickle for Naive bayes model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ba71356a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model accuracy: 0.7577872168284789\n",
      "A person's income below $50K, Single prediction = [0]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Save model\n",
    "with open('Ad_incomeknn.pkl', 'wb') as file:\n",
    "    pickle.dump(gb, file)\n",
    "\n",
    "# Load model\n",
    "with open('Ad_incomeknn.pkl', 'rb') as file:\n",
    "    loaded_model = pickle.load(file)\n",
    "\n",
    "# Make predictions using the loaded model\n",
    "loaded_model_pred = loaded_model.predict(x_test_scaled)\n",
    "\n",
    "# Verify the model by predicting on the test set\n",
    "accuracy = loaded_model.score(x_test_scaled, y_test)\n",
    "print(f\"Loaded model accuracy: {accuracy}\")\n",
    "\n",
    "# To get a single prediction\n",
    "sigle_pred = x_test_scaled[0:1] \n",
    "\n",
    "# Make a single prediction using the loaded model\n",
    "sp = loaded_model.predict(sigle_pred)\n",
    "\n",
    "if sp ==1:\n",
    "    print(\"A person's income above $50K, Single prediction =\", sp)\n",
    "else:\n",
    "    print(\"A person's income below $50K, Single prediction =\", sp)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b27ebd5",
   "metadata": {},
   "source": [
    "# KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4e083f8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.84\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.78      0.83      4905\n",
      "           1       0.81      0.91      0.85      4983\n",
      "\n",
      "    accuracy                           0.84      9888\n",
      "   macro avg       0.85      0.84      0.84      9888\n",
      "weighted avg       0.85      0.84      0.84      9888\n",
      "\n",
      "\n",
      "Confusion Metrics:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fit the model for split dataset\n",
    "knn_model =KNeighborsClassifier(n_neighbors=7).fit(x_train_scaled,y_train)\n",
    "y_pred = knn_model.predict(x_test_scaled)\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Accuracy: {accuracy:.2f}')\n",
    "\n",
    "# Classification Report and Confusion Matrix\n",
    "print('\\nClassification Report:')\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "print('\\nConfusion Metrics:')\n",
    "confusion_matrix = metrics.confusion_matrix(y_test, y_pred)\n",
    "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, \n",
    "                                            display_labels = [False,True])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "# Predict the probabilities of the positive class\n",
    "y_pred = knn_model.predict_proba(x_test_scaled)[:,1]\n",
    "y_pred.shape\n",
    "\n",
    "# Calculate the ROC curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n",
    "\n",
    "# Calculate the AUC score\n",
    "auc_score = auc(fpr, tpr)\n",
    "x1=np.linspace(0,1,100)\n",
    "# Plot the ROC curve\n",
    "plt.plot(fpr, tpr, label=\"ROC curve (AUC = %0.2f)\" % auc_score)\n",
    "plt.plot(x1,x1,label='baseline')\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC curve for binary classification\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "8476f26f",
   "metadata": {},
   "source": [
    "Make prediction from joblib for KNN model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d6e05c7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model accuracy: 0.84375\n",
      "A person's income above $50K, Single prediction = [1]\n"
     ]
    }
   ],
   "source": [
    "from joblib import dump, load\n",
    "\n",
    "dump(knn_model, 'adknn.joblib')\n",
    "# Load the model using joblib\n",
    "loaded_model = load('adknn.joblib')\n",
    "\n",
    "# Make predictions using the loaded model\n",
    "def predict(input_data):\n",
    "    # Ensure input_data is a NumPy array\n",
    "    input_data_np = np.array(input_data)\n",
    "\n",
    "    # Use the loaded model for predictions\n",
    "    predictions = loaded_model.predict(input_data_np)\n",
    "\n",
    "    return predictions\n",
    "\n",
    "accuracy = loaded_model.score(x_test_scaled, y_test)\n",
    "print(f\"Loaded model accuracy: {accuracy}\")\n",
    "\n",
    "sample = x_test_scaled[0:1]  \n",
    "\n",
    "# Prediction of the model\n",
    "ld_pred = predict(sample)\n",
    "\n",
    "if ld_pred == 1:\n",
    "    print(\"A person's income above $50K, Single prediction =\", ld_pred)\n",
    "else:\n",
    "    print(\"A person's income below $50K, Single prediction =\", ld_pred)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "51237287",
   "metadata": {},
   "source": [
    "Make prediction from pickle for KNN model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "71b17968",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model accuracy: 0.84375\n",
      "A person's income above $50K, Single prediction = [1]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Save model\n",
    "with open('Ad_incomeknn.pkl', 'wb') as file:\n",
    "    pickle.dump(knn_model, file)\n",
    "\n",
    "# Load model\n",
    "with open('Ad_incomeknn.pkl', 'rb') as file:\n",
    "    loaded_model = pickle.load(file)\n",
    "\n",
    "# Make predictions using the loaded model\n",
    "loaded_model_pred = loaded_model.predict(x_test_scaled)\n",
    "\n",
    "# Verify the model by predicting on the test set\n",
    "accuracy = loaded_model.score(x_test_scaled, y_test)\n",
    "print(f\"Loaded model accuracy: {accuracy}\")\n",
    "\n",
    "# To get a single prediction\n",
    "sigle_pred = x_test_scaled[0:1] \n",
    "\n",
    "# Make a single prediction using the loaded model\n",
    "sp = loaded_model.predict(sigle_pred)\n",
    "\n",
    "if sp ==1:\n",
    "    print(\"A person's income above $50K, Single prediction =\", sp)\n",
    "else:\n",
    "    print(\"A person's income below $50K, Single prediction =\", sp)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be7eb6db",
   "metadata": {},
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "22f33a7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.87\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.85      0.87      4905\n",
      "           1       0.86      0.89      0.87      4983\n",
      "\n",
      "    accuracy                           0.87      9888\n",
      "   macro avg       0.87      0.87      0.87      9888\n",
      "weighted avg       0.87      0.87      0.87      9888\n",
      "\n",
      "\n",
      "Confusion Metrics:\n"
     ]
    },
    {
     "data": {
      "image/png": "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piIxMfGe8ba2trh58yaee+459OvXD9OmTUN4eDhee+01AMCgQYOQlpaG7777Do888giGDh2KlStXwsvLy1IfiahFAgICsG3bNrz55psYPHgwzpw5g8WLFxvEzJ49G2+//TZSUlIQFBSEESNGICUlBX5+fm00aiJpyIS7JxqJiIiIWgkrHkRERGQxTDyIiIjIYph4EBERkcUw8SAiIiKLYeJBREREFsPEg4iIiCyGiQcRERFZDBMPIiIishgmHkQdRHx8PIYMGSK+njVrFp544gmLj+Pq1auQyWQGzxa5W69evbBx48Zm95mSkoIuXbqYPTaZTIb333/f7H6IqPUw8SAyw6xZsyCTySCTyWBvb4/evXtj8eLFqKysbPX33rRpE1JSUpoV25xkgYjIEviQOCIzTZw4ETt37kRdXR3+85//YPbs2aisrERSUlKj2Lq6Otjb20vyvkqlUpJ+iIgsiRUPIjPJ5XKoVCr4+PggMjISM2bMEMv9t6dH/vGPf6B3796Qy+UQBAFarRZz5syBh4cHFAoFRo8eja+//tqg39dffx2enp5wcXFBdHQ0qqurDa7fPdWi1+uxdu1a9O3bF3K5HD179sSaNWsAQHyw2NChQyGTyTBy5Eix3c6dOxEQEABHR0cMGDAA27ZtM3ifM2fOYOjQoXB0dMSwYcNw7tw5k79H69evR1BQEJydneHj44O5c+eioqKiUdz777+Pfv36wdHREePGjUN+fr7B9Y8++gjBwcFwdHRE79698dprr0Gn05k8HiJqO0w8iCTm5OSEuro68fXly5dx4MABvPvuu+JUx+OPPw6NRoNDhw4hKysLDz74IMaMGYOff/4ZAHDgwAGsWrUKa9asQWZmJry8vBolBHd75ZVXsHbtWqxcuRKXLl3C3r174enpCaAheQCAY8eOobCwEO+99x4AYPv27VixYgXWrFmDnJwcJCQkYOXKldi1axcAoLKyEhEREejfvz+ysrIQHx/f6CmqzWFjY4PNmzfjwoUL2LVrF44fP46lS5caxNy6dQtr1qzBrl278OWXX6KsrAzPPvuseP3TTz/FH//4R8TGxuLSpUtITk5GSkqKmFwRUQchEFGLzZw5U5gyZYr4+vTp00LXrl2FadOmCYIgCKtWrRLs7e2FoqIiMeazzz4TFAqFUF1dbdBXnz59hOTkZEEQBCEsLEx44YUXDK6HhIQIgwcPbvK9y8rKBLlcLmzfvr3Jcebl5QkAhHPnzhmc9/HxEfbu3WtwbvXq1UJYWJggCIKQnJwsuLm5CZWVleL1pKSkJvu6k6+vr7Bhw4Z7Xj9w4IDQtWtX8fXOnTsFAEJGRoZ4LicnRwAgnD59WhAEQXjkkUeEhIQEg352794teHl5ia8BCAcPHrzn+xJR2+MaDyIzffzxx+jcuTN0Oh3q6uowZcoUbNmyRbzu6+uLbt26ia+zsrJQUVGBrl27GvRTVVWF77//HgCQk5ODF154weB6WFgYPv/88ybHkJOTg5qaGowZM6bZ4y4uLkZ+fj6io6MRExMjntfpdOL6kZycHAwePBidOnUyGIepPv/8cyQkJODSpUsoKyuDTqdDdXU1Kisr4ezsDACws7PDsGHDxDYDBgxAly5dkJOTg9/97nfIysrC2bNnDSoc9fX1qK6uxq1btwzGSETtFxMPIjONGjUKSUlJsLe3h7e3d6PFo7d/sd6m1+vh5eWFEydONOqrpVtKnZycTG6j1+sBNEy3hISEGFyztbUFAAiC0KLx3OnatWt47LHH8MILL2D16tVwc3NDeno6oqOjDaakgIbtsHe7fU6v1+O1117D1KlTG8U4OjqaPU4isgwmHkRmcnZ2Rt++fZsd/+CDD0Kj0cDOzg69evVqMiYgIAAZGRl47rnnxHMZGRn37NPf3x9OTk747LPPMHv27EbXHRwcADRUCG7z9PRE9+7dceXKFcyYMaPJfgcOHIjdu3ejqqpKTG6MjaMpmZmZ0Ol0WLduHWxsGpaVHThwoFGcTqdDZmYmfve73wEAcnNzUVpaigEDBgBo+L7l5uaa9L0movaHiQeRhY0dOxZhYWF44oknsHbtWvTv3x/Xr1/HoUOH8MQTT2DYsGF46aWXMHPmTAwbNgwPP/wwUlNTcfHiRfTu3bvJPh0dHbFs2TIsXboUDg4O+P3vf4/i4mJcvHgR0dHR8PDwgJOTE9RqNXr06AFHR0colUrEx8cjNjYWCoUC4eHhqKmpQWZmJkpKSrBw4UJERkZixYoViI6Oxl//+ldcvXoVf//73036vH369IFOp8OWLVswadIkfPnll3jrrbcaxdnb22PBggXYvHkz7O3tMX/+fISGhoqJyKuvvoqIiAj4+PjgmWeegY2NDb755hucP38e//u//2v6fwgiahPc1UJkYTKZDIcOHcKjjz6KP//5z+jXrx+effZZXL16VdyFMn36dLz66qtYtmwZgoODce3aNbz44otG+125ciUWLVqEV199FQEBAZg+fTqKiooANKyf2Lx5M5KTk+Ht7Y0pU6YAAGbPno23334bKSkpCAoKwogRI5CSkiJuv+3cuTM++ugjXLp0CUOHDsWKFSuwdu1akz7vkCFDsH79eqxduxaBgYFITU1FYmJio7hOnTph2bJliIyMRFhYGJycnLBv3z7x+oQJE/Dxxx/j6NGjeOihhxAaGor169fD19fXpPEQUduSCVJM4hIRERE1AyseREREZDFMPIiIiMhimHgQERGRxTDxICIiIoth4kFEREQWw8SDiIiILIaJBxEREVkMEw8iIiKyGCYeREREZDFMPIiIiMhimHgQERGRxfw/9cQQvV0sGRgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rf = RandomForestClassifier(random_state=42)\n",
    "# Train the model\n",
    "rf.fit(x_train_scaled, y_train)\n",
    "# Make predictions on the test set\n",
    "y_pred = rf.predict(x_test_scaled)\n",
    "\n",
    "# Evaluate the model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Accuracy: {accuracy:.2f}')\n",
    "# Classification Report and Confusion Matrix\n",
    "print('\\nClassification Report:')\n",
    "print(classification_report(y_test, y_pred))\n",
    "print('\\nConfusion Metrics:')\n",
    "confusion_matrix = metrics.confusion_matrix(y_test, y_pred)\n",
    "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, \n",
    "                                            display_labels = [False,True])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "# Predict the probabilities of the positive class\n",
    "y_pred = rf.predict_proba(x_test_scaled)[:,1]\n",
    "y_pred.shape\n",
    "\n",
    "# Calculate the ROC curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n",
    "# Calculate the AUC score\n",
    "auc_score = auc(fpr, tpr)\n",
    "x1=np.linspace(0,1,100)\n",
    "# Plot the ROC curve\n",
    "plt.plot(fpr, tpr, label=\"ROC curve (AUC = %0.2f)\" % auc_score)\n",
    "plt.plot(x1,x1,label='baseline')\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC curve for binary classification\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a46eaa75",
   "metadata": {},
   "source": [
    "Make prediction from joblib for Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "cc904ddb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model accuracy: 0.8709546925566343\n",
      "A person's income above $50K, Single prediction = [1]\n"
     ]
    }
   ],
   "source": [
    "from joblib import dump, load\n",
    "\n",
    "dump(rf, 'adrf.joblib')\n",
    "# Load the model using joblib\n",
    "loaded_model = load('adrf.joblib')\n",
    "\n",
    "# Make predictions using the loaded model\n",
    "def predict(input_data):\n",
    "    # Ensure input_data is a NumPy array\n",
    "    input_data_np = np.array(input_data)\n",
    "\n",
    "    # Use the loaded model for predictions\n",
    "    predictions = loaded_model.predict(input_data_np)\n",
    "\n",
    "    return predictions\n",
    "\n",
    "accuracy = loaded_model.score(x_test_scaled, y_test)\n",
    "print(f\"Loaded model accuracy: {accuracy}\")\n",
    "\n",
    "sample = x_test_scaled[0:1]  \n",
    "\n",
    "# Prediction of the model\n",
    "ld_pred = predict(sample)\n",
    "\n",
    "if ld_pred == 1:\n",
    "    print(\"A person's income above $50K, Single prediction =\", ld_pred)\n",
    "else:\n",
    "    print(\"A person's income below $50K, Single prediction =\", ld_pred)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "1bd50920",
   "metadata": {},
   "source": [
    "Make prediction from pickle for Random Forest model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e49ec1bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model accuracy: 0.8709546925566343\n",
      "A person's income above $50K, Single prediction = [1]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Save model\n",
    "with open('Ad_income.pkl', 'wb') as file:\n",
    "    pickle.dump(rf, file)\n",
    "\n",
    "# Load model\n",
    "with open('Ad_income.pkl', 'rb') as file:\n",
    "    loaded_model = pickle.load(file)\n",
    "\n",
    "# Make predictions using the loaded model\n",
    "loaded_model_pred = loaded_model.predict(x_test_scaled)\n",
    "\n",
    "# Verify the model by predicting on the test set\n",
    "accuracy = loaded_model.score(x_test_scaled, y_test)\n",
    "print(f\"Loaded model accuracy: {accuracy}\")\n",
    "\n",
    "# To get a single prediction\n",
    "sigle_pred = x_test_scaled[0:1] \n",
    "\n",
    "# Make a single prediction using the loaded model\n",
    "sp = loaded_model.predict(sigle_pred)\n",
    "\n",
    "if sp ==1:\n",
    "    print(\"A person's income above $50K, Single prediction =\", sp)\n",
    "else:\n",
    "    print(\"A person's income below $50K, Single prediction =\", sp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b560bd64",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "08e2e33a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.77\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.77      0.77      4905\n",
      "           1       0.77      0.78      0.78      4983\n",
      "\n",
      "    accuracy                           0.77      9888\n",
      "   macro avg       0.77      0.77      0.77      9888\n",
      "weighted avg       0.77      0.77      0.77      9888\n",
      "\n",
      "\n",
      "Confusion Metrics:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr = LogisticRegression(random_state=42)\n",
    "\n",
    "# Train the model\n",
    "lr.fit(x_train_scaled, y_train)\n",
    "# Make predictions on the test set\n",
    "y_pred = lr.predict(x_test_scaled)\n",
    "\n",
    "# Evaluate the model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Accuracy: {accuracy:.2f}')\n",
    "# Classification Report and Confusion Matrix\n",
    "print('\\nClassification Report:')\n",
    "print(classification_report(y_test, y_pred))\n",
    "print('\\nConfusion Metrics:')\n",
    "confusion_matrix = metrics.confusion_matrix(y_test, y_pred)\n",
    "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, \n",
    "                                            display_labels = [False,True])\n",
    "cm_display.plot()\n",
    "plt.show()\n",
    "\n",
    "# Predict the probabilities of the positive class\n",
    "y_pred = lr.predict_proba(x_test)[:,1]\n",
    "y_pred.shape\n",
    "\n",
    "# Calculate the ROC curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n",
    "# Calculate the AUC score\n",
    "auc_score = auc(fpr, tpr)\n",
    "x1=np.linspace(0,1,100)\n",
    "# Plot the ROC curve\n",
    "plt.plot(fpr, tpr, label=\"ROC curve (AUC = %0.2f)\" % auc_score)\n",
    "plt.plot(x1,x1,label='baseline')\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC curve for binary classification\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5344c750",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "raw",
   "id": "2a1bff01",
   "metadata": {},
   "source": [
    "Make prediction from joblib for Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2dd11913",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model accuracy: 0.7725525889967637\n",
      "A person's income above $50K, Single prediction = [1]\n"
     ]
    }
   ],
   "source": [
    "from joblib import dump, load\n",
    "\n",
    "dump(lr, 'adlr.joblib')\n",
    "# Load the model using joblib\n",
    "loaded_model = load('adlr.joblib')\n",
    "\n",
    "# Make predictions using the loaded model\n",
    "def predict(input_data):\n",
    "    # Ensure input_data is a NumPy array\n",
    "    input_data_np = np.array(input_data)\n",
    "\n",
    "    # Use the loaded model for predictions\n",
    "    predictions = loaded_model.predict(input_data_np)\n",
    "\n",
    "    return predictions\n",
    "\n",
    "accuracy = loaded_model.score(x_test_scaled, y_test)\n",
    "print(f\"Loaded model accuracy: {accuracy}\")\n",
    "\n",
    "sample = x_test_scaled[0:1]  \n",
    "\n",
    "# Prediction of the model\n",
    "ld_pred = predict(sample)\n",
    "\n",
    "if ld_pred == 1:\n",
    "    print(\"A person's income above $50K, Single prediction =\", ld_pred)\n",
    "else:\n",
    "    print(\"A person's income below $50K, Single prediction =\", ld_pred)\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "7cc0da23",
   "metadata": {},
   "source": [
    "Make prediction from pickle for Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1768281f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model accuracy: 0.7725525889967637\n",
      "A person's income above $50K, Single prediction = [1]\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Save model\n",
    "with open('Ad_income.pkl', 'wb') as file:\n",
    "    pickle.dump(lr, file)\n",
    "\n",
    "# Load model\n",
    "with open('Ad_income.pkl', 'rb') as file:\n",
    "    loaded_model = pickle.load(file)\n",
    "\n",
    "# Make predictions using the loaded model\n",
    "loaded_model_pred = loaded_model.predict(x_test_scaled)\n",
    "\n",
    "# Verify the model by predicting on the test set\n",
    "accuracy = loaded_model.score(x_test_scaled, y_test)\n",
    "print(f\"Loaded model accuracy: {accuracy}\")\n",
    "\n",
    "# To get a single prediction\n",
    "sigle_pred = x_test_scaled[0:1] \n",
    "\n",
    "# Make a single prediction using the loaded model\n",
    "sp = loaded_model.predict(sigle_pred)\n",
    "\n",
    "if sp ==1:\n",
    "    print(\"A person's income above $50K, Single prediction =\", sp)\n",
    "else:\n",
    "    print(\"A person's income below $50K, Single prediction =\", sp)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fd80169",
   "metadata": {},
   "source": [
    "# Make prediction from Tensorflow Keras model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "bdeab69a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "989/989 [==============================] - 4s 3ms/step - loss: 0.4160 - accuracy: 0.8021 - val_loss: 0.3924 - val_accuracy: 0.8176\n",
      "Epoch 2/10\n",
      "989/989 [==============================] - 3s 3ms/step - loss: 0.3879 - accuracy: 0.8203 - val_loss: 0.3856 - val_accuracy: 0.8201\n",
      "Epoch 3/10\n",
      "989/989 [==============================] - 3s 3ms/step - loss: 0.3820 - accuracy: 0.8236 - val_loss: 0.3825 - val_accuracy: 0.8204\n",
      "Epoch 4/10\n",
      "989/989 [==============================] - 3s 3ms/step - loss: 0.3775 - accuracy: 0.8258 - val_loss: 0.3842 - val_accuracy: 0.8204\n",
      "Epoch 5/10\n",
      "989/989 [==============================] - 3s 3ms/step - loss: 0.3742 - accuracy: 0.8273 - val_loss: 0.3824 - val_accuracy: 0.8190\n",
      "Epoch 6/10\n",
      "989/989 [==============================] - 3s 3ms/step - loss: 0.3706 - accuracy: 0.8288 - val_loss: 0.3756 - val_accuracy: 0.8221\n",
      "Epoch 7/10\n",
      "989/989 [==============================] - 3s 3ms/step - loss: 0.3679 - accuracy: 0.8294 - val_loss: 0.3744 - val_accuracy: 0.8232\n",
      "Epoch 8/10\n",
      "989/989 [==============================] - 3s 3ms/step - loss: 0.3659 - accuracy: 0.8308 - val_loss: 0.3722 - val_accuracy: 0.8256\n",
      "Epoch 9/10\n",
      "989/989 [==============================] - 3s 3ms/step - loss: 0.3632 - accuracy: 0.8319 - val_loss: 0.3714 - val_accuracy: 0.8286\n",
      "Epoch 10/10\n",
      "989/989 [==============================] - 3s 3ms/step - loss: 0.3617 - accuracy: 0.8324 - val_loss: 0.3720 - val_accuracy: 0.8288\n",
      "309/309 [==============================] - 1s 2ms/step\n",
      "1/1 [==============================] - 0s 63ms/step\n",
      "A person's income above $50K, Single prediction = [1]\n",
      "Accuracy on test set (Keras): 0.8235\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "\n",
    "# Convert labels to one-hot encoding for Keras\n",
    "y_train_one_hot = keras.utils.to_categorical(y_train)\n",
    "y_test_one_hot = keras.utils.to_categorical(y_test)\n",
    "\n",
    "# Nerual network model use\n",
    "md = keras.Sequential([\n",
    "    keras.layers.Dense(128, activation='relu', \n",
    "                       input_shape=(x_train_scaled.shape[1],)),\n",
    "    keras.layers.Dense(2, activation='softmax') \n",
    "])\n",
    "\n",
    "md.compile(optimizer='adam', loss='categorical_crossentropy', \n",
    "           metrics=['accuracy'])\n",
    "\n",
    "# Keras model training step\n",
    "md.fit(x_train_scaled, y_train_one_hot, epochs=10, batch_size=32, \n",
    "       validation_split=0.2)\n",
    "\n",
    "# Model evaluation step\n",
    "y_pred_keras = np.argmax(md.predict(x_test_scaled), axis=1)\n",
    "\n",
    "# Save Keras model\n",
    "md.save('km.h5')\n",
    "\n",
    "# Load Keras model\n",
    "loaded_mk = keras.models.load_model('km.h5')\n",
    "\n",
    "# Make predictions using the loaded Keras model\n",
    "def predict(input_data, loaded_model):\n",
    "    return np.argmax(loaded_model.predict(input_data), axis=1)\n",
    "\n",
    "# Example usage:\n",
    "sample_in = x_test_scaled[0:1]\n",
    "keras_predictions = predict(sample_in, loaded_mk)\n",
    "\n",
    "if keras_predictions ==1:\n",
    "    print(\"A person's income above $50K, Single prediction =\"\n",
    "          ,keras_predictions)\n",
    "else:\n",
    "    print(\"A person's income below $50K, Single prediction =\"\n",
    "          ,keras_predictions)\n",
    "    \n",
    "# Accuracy of model\n",
    "accuracy_keras = accuracy_score(y_test, y_pred_keras)\n",
    "print(f\"Accuracy on test set (Keras): {accuracy_keras:.4f}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
